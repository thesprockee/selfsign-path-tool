name: Build and Release

on:
  push:
    tags:
      - 'v*.*.*'  # Triggers on semantic version tags like v1.0.0, v2.1.3, etc.
  release:
    types: [created]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, windows]
        goarch: [amd64]
        include:
          - goos: windows
            goarch: amd64
            ext: .exe
          - goos: linux
            goarch: amd64
            ext: ""

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Extract version from tag
      shell: bash
      run: |
        if [[ "${{ github.event_name }}" == "push" ]]; then
          # Tag push event - extract from GITHUB_REF
          VERSION=${GITHUB_REF#refs/tags/v}
          TAG_NAME=${GITHUB_REF#refs/tags/}
        elif [[ "${{ github.event_name }}" == "release" ]]; then
          # Release event - extract from event data
          TAG_NAME="${{ github.event.release.tag_name }}"
          VERSION=${TAG_NAME#v}
        else
          echo "Unexpected event type: ${{ github.event_name }}"
          exit 1
        fi
        
        echo "Event type: ${{ github.event_name }}"
        echo "Tag name: $TAG_NAME"
        echo "Version: $VERSION"
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        # Update version in main.go
        sed -i 's/const version = ".*"/const version = "'$VERSION'"/' main.go
        
        # Build the binary
        BINARY_NAME="selfsign-path-tool-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.ext }}"
        go build -ldflags="-s -w" -o "$BINARY_NAME"
        
        echo "Built binary: $BINARY_NAME"
        ls -la "$BINARY_NAME"
        
        # Set binary name for upload step
        echo "BINARY_NAME=$BINARY_NAME" >> $GITHUB_ENV

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ${{ env.BINARY_NAME }}
        asset_name: ${{ env.BINARY_NAME }}
        asset_content_type: application/octet-stream

  create-release:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Extract version from tag
      shell: bash
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        TAG_NAME=${GITHUB_REF#refs/tags/}
        
        echo "Version: $VERSION"
        echo "Tag name: $TAG_NAME"
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV

    - name: Generate release notes
      run: |
        echo "# Release $TAG_NAME" > RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        echo "Cross-platform Go binary release of selfsign-path-tool." >> RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        echo "## Downloads" >> RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        echo "- **Linux (x86_64)**: \`selfsign-path-tool-linux-amd64\`" >> RELEASE_NOTES.md
        echo "- **Windows (x86_64)**: \`selfsign-path-tool-windows-amd64.exe\`" >> RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        echo "## Usage" >> RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        echo "1. Download the appropriate binary for your platform" >> RELEASE_NOTES.md
        echo "2. Make it executable (Linux/macOS): \`chmod +x selfsign-path-tool-linux-amd64\`" >> RELEASE_NOTES.md
        echo "3. Run with \`--help\` to see available options" >> RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        echo "## Features" >> RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        echo "- Cross-platform code signing utility" >> RELEASE_NOTES.md
        echo "- Self-signed certificate generation and management" >> RELEASE_NOTES.md
        echo "- File pattern matching and recursive directory processing" >> RELEASE_NOTES.md
        echo "- Signature status checking and removal" >> RELEASE_NOTES.md
        echo "- No external dependencies - single binary executable" >> RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        echo "## Changes" >> RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        
        # Get commit messages since last tag
        if git describe --tags --abbrev=0 HEAD~1 >/dev/null 2>&1; then
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD~1)
          echo "Changes since $PREV_TAG:" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          git log --oneline "$PREV_TAG"..HEAD | sed 's/^/- /' >> RELEASE_NOTES.md
        else
          echo "- Initial release of Go-based selfsign-path-tool" >> RELEASE_NOTES.md
          echo "- Replaces PowerShell-based implementation" >> RELEASE_NOTES.md
          echo "- Cross-platform support for Windows and Linux" >> RELEASE_NOTES.md
          echo "- Single binary deployment" >> RELEASE_NOTES.md
        fi

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.TAG_NAME }}
        release_name: Release ${{ env.TAG_NAME }}
        body_path: RELEASE_NOTES.md
        draft: true
        prerelease: false

  upload-to-release:
    needs: [create-release, build]
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    strategy:
      matrix:
        goos: [linux, windows]
        goarch: [amd64]
        include:
          - goos: windows
            goarch: amd64
            ext: .exe
          - goos: linux
            goarch: amd64
            ext: ""

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Extract version from tag
      shell: bash
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        TAG_NAME=${GITHUB_REF#refs/tags/}
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        # Update version in main.go
        sed -i 's/const version = ".*"/const version = "'$VERSION'"/' main.go
        
        # Build the binary
        BINARY_NAME="selfsign-path-tool-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.ext }}"
        go build -ldflags="-s -w" -o "$BINARY_NAME"
        
        echo "Built binary: $BINARY_NAME"
        ls -la "$BINARY_NAME"
        
        echo "BINARY_NAME=$BINARY_NAME" >> $GITHUB_ENV

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ${{ env.BINARY_NAME }}
        asset_name: ${{ env.BINARY_NAME }}
        asset_content_type: application/octet-stream