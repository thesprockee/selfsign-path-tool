name: Automated Release

on:
  push:
    tags:
      - 'v*.*.*'  # Triggers on semantic version tags like v1.0.0, v2.1.3, etc.
  release:
    types: [created]

jobs:
  create-release:
    runs-on: windows-latest
    if: github.event_name == 'push' || (github.event_name == 'release' && github.event.release.draft == true)
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for changelog generation
    
    - name: Extract version from tag
      shell: pwsh
      run: |
        if ($env:GITHUB_EVENT_NAME -eq "push") {
          # Tag push event - extract from GITHUB_REF
          $version = $env:GITHUB_REF -replace 'refs/tags/v', ''
          $tagName = $env:GITHUB_REF -replace 'refs/tags/', ''
        } elseif ($env:GITHUB_EVENT_NAME -eq "release") {
          # Release event - extract from event data
          $tagName = '${{ github.event.release.tag_name }}'
          $version = $tagName -replace '^v', ''
        } else {
          Write-Error "Unexpected event type: $env:GITHUB_EVENT_NAME"
          exit 1
        }
        
        Write-Host "Event type: $env:GITHUB_EVENT_NAME"
        Write-Host "Tag name: $tagName"
        Write-Host "Version: $version"
        echo "VERSION=$version" >> $env:GITHUB_ENV
        echo "TAG_NAME=$tagName" >> $env:GITHUB_ENV
    
    - name: Create release artifacts
      shell: pwsh
      run: |
        Write-Host "üîß Creating release artifacts using CMake..."
        
        # Create build directory and configure
        New-Item -ItemType Directory -Force -Path "build"
        Set-Location "build"
        
        # Configure CMake with version information
        cmake .. -DVERSION=$env:VERSION -DTAG_NAME=$env:TAG_NAME
        
        # Build the distribution target
        cmake --build . --target dist
        
        # Move generated files to root for upload
        Set-Location ..
        if (Test-Path "selfsign-path-v$env:VERSION.ps1") {
          Write-Host "‚úÖ Generated versioned script: selfsign-path-v$env:VERSION.ps1"
        } else {
          Write-Error "‚ùå Failed to generate versioned script"
          exit 1
        }
        
        if (Test-Path "RELEASE_NOTES.md") {
          Write-Host "‚úÖ Generated release notes: RELEASE_NOTES.md"
        } else {
          Write-Error "‚ùå Failed to generate release notes"
          exit 1
        }
      env:
        SIGNING_CERT: ${{ secrets.SIGNING_CERT }}
        SIGNING_CERT_PASSWORD: ${{ secrets.SIGNING_CERT_PASSWORD }}
    
    - name: Create draft release and upload script
      shell: pwsh
      run: |
        if ($env:GITHUB_EVENT_NAME -eq "push") {
          Write-Host "Creating draft release for tag push..."
          
          # Create the draft release with the versioned script attached
          $ghArgs = @(
            "release", "create", $env:TAG_NAME, "selfsign-path-v$env:VERSION.ps1",
            "--draft", "--title", "Release $env:TAG_NAME", "--notes-file", "RELEASE_NOTES.md"
          )
          
          Write-Host "Executing GitHub CLI with arguments: $ghArgs"
          Start-Process -FilePath "gh" -ArgumentList $ghArgs -NoNewWindow -Wait -PassThru
          
          if ($LASTEXITCODE -eq 0) {
            Write-Host "Draft release created successfully!" -ForegroundColor Green
          } else {
            Write-Error "Failed to create draft release"
            exit 1
          }
        } elseif ($env:GITHUB_EVENT_NAME -eq "release") {
          Write-Host "Uploading script to existing release..."
          
          # Upload the versioned script to the existing release
          $ghArgs = @(
            "release", "upload", $env:TAG_NAME, "selfsign-path-v$env:VERSION.ps1"
          )
          
          Write-Host "Executing GitHub CLI with arguments: $ghArgs"
          Start-Process -FilePath "gh" -ArgumentList $ghArgs -NoNewWindow -Wait -PassThru
          
          $proc = Start-Process -FilePath "gh" -ArgumentList $ghArgs -NoNewWindow -Wait -PassThru
          
          if ($proc.ExitCode -eq 0) {
            Write-Host "Script uploaded to release successfully!" -ForegroundColor Green
            
            # Also update the release notes if we have them
            Write-Host "Updating release notes..."
            $ghArgs = @(
              "release", "edit", $env:TAG_NAME, "--notes-file", "RELEASE_NOTES.md"
            )
            $proc = Start-Process -FilePath "gh" -ArgumentList $ghArgs -NoNewWindow -Wait -PassThru
          } else {
            Write-Error "Failed to upload script to release"
            exit 1
          }
        }
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Release summary
      shell: pwsh
      run: |
        Write-Host "üéâ Release automation completed!" -ForegroundColor Green
        Write-Host "üìù Event type: $env:GITHUB_EVENT_NAME"
        Write-Host "üì¶ Release: $env:TAG_NAME"
        Write-Host "üìÑ Script: selfsign-path-v$env:VERSION.ps1"
        Write-Host "üîê Script signed: $env:SCRIPT_SIGNED"
        Write-Host ""
        
        if ($env:GITHUB_EVENT_NAME -eq "push") {
          Write-Host "‚úÖ Draft release created for tag push"
        } elseif ($env:GITHUB_EVENT_NAME -eq "release") {
          Write-Host "‚úÖ Script uploaded to existing draft release"
        }
        
        Write-Host ""
        Write-Host "The release is available at:"
        Write-Host "https://github.com/$env:GITHUB_REPOSITORY/releases"
        Write-Host ""
        if ($env:GITHUB_EVENT_NAME -eq "push") {
          Write-Host "Review the draft release and publish when ready!"
        }